02
@Bean
	("name_bean") можно указать имя бина, если не указано, то имя это название метода
	позволяет создать бин
	в нестатичесих методах
	зависимости бинов в параметрах метода

@Configuration
	все бины располагаются в классах помеченных этой аннотацией
	классы при использование обычно делятся по слою, технологии
	класс должен иметь конструктор без параметров
	класс конфигурации максимально плоский, без иерархий

	аннотации которые влючают в себя @Configuration:
		@SpringBootApplication
		@TestConfiguration
		@EnableWebSecurity

@EnableJpaRepositories
	аннотация включает jpaRepositories
	означает что начиная с этого класса в глубь пакетов будет искать @Entity @Repository
	Должны стоять на класса с @Configuration

@Import
	(class_name.class) импортирует файл конфигурации с бинами
	можно испортировать бин к классу в тестах


@ComponentScan
	(basePackages = "имя_пакета") будут искаться в указаном пакете файлы с аннотациями
		@Configuration, @Component, @Service, @Controller
	если не задан пакет то ищет по пакетам начная с текущего вглубь
	аннотация @SpringBootApplication включает в себя эту аннотацию
	(excludeFilters = @ComponentScan.Filter(type = FilterType.*, classes = Class_name.class))
	 	*ASSIGNABLE_TYPE позволяет исключить сканирование бинов по типу класса

@ComponentScans
	включает в себя много ComponentScan



@Component
	("name_bean") можно указать имя бина, и для наследников
	создает бин класса c именем класса с маленькой буквы

@Service
	создан для бизнес-сервисов
	содержит в себе @Component

@Controller
	для sprign mvc контроллеров
	содержит в себе @Component

@Repository
	используется для JPA репозиториев
	содержит в себе @Component



@Required
	аннотация которая указывает что надо задать свойство в сеттере и передать параметры

@Autowired
	внедряет параметры в класс которые являются бинами
	можно использовать на конструктере, поле класса, сеттере, любой метод
	со спринга 4.2 если конструктор в классе один, то подразумевается что он @Autowired

@Qualifier
	позволяет указать id бина при @Autowired



Property-files:
@PropertieSource
	("classpath:name_prop.properties") можно указать имя properties,
	которые хранятся в ресурсах src/main/resouces или */test/*
	ставится на классе который помечен @Configuration
	(В Spring Boot есть) - Что бы использовать property-file нужно создать бин PropertySourcesPlaceholderConfigurer

@Value
	("${name_prop.value_prop}")или("#{}") параметры для указания ключа
	эта анотация используется что бы внедрят значения из properties
	может использоваться на поле класса, конструкторе, методе
	передача параметров из командой строки в бин -Dpropery.name=val @Value("${env.property.name}")


Локализация приложения и интернацианализация:

bundle - файл с значениями по типу мапы
можете поменять местонахождение бандлов в
application.yml:
	spring.messages.basename: path/to/i18n/messages
Что бы использовать бандлы нужно создать бин MessageSource (Spring Boot уже есть)
ReloadableResourceBundleMessageSource ms
ms.setBasename("/path_bundle_in_resource")
ms.setDefaultEncoding("enc_name")

что бы получит значение, необхомо в класс добавить MessageSource
и сделать getMessage("key", params, local)

Utils классы лучше делать бинами
