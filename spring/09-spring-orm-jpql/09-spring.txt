Spring orm

persistence context
    это сессионный кеш первого уровня для объектов которые сохраняются и загружаются
        в\из бд в рамках сессии\транзакции
    сущность может находится в трех состояниях
        transient
            объект ниразу не был присоединен к контексту, то есть это новый объект для
                контекста и бд
        persistent
            объект находится под управлением persistence context,
                изменения в объекте будут оборажены в бд
        detached
            объект когда то был в прикреплен к контексту
            попадает в это состояние если исключить его из контекста,
                очистить или закрыть сессию

EntityManager
    создается как бин в spring orm, без спринга конфиг берется из persistence.xml
    внедряется через @PersistenceContext в репозиторий
    отвечает за все операции над сущностями
    для всех запросов можно включит статистику хибернейта(если он провайдер),
        entityManager.getEntityManagerFactory().unwrap(SessionFactory.class)
            .getStatistics().setStatisticsEnabled(true);
    метод setMaxResult(n) где n кол-во записей которое вернется из метода,
        выгружает все записи из базы и уже в коде возвращает n записей
        лучше использовать аккуратно
    методы и их значения:
        find()
            поиск и загрузка сущности в persistence context
            сущность получает состояни persistent

        persist()
            прикрепляет сущность у контексту, после чего делает сохранение в базу(не сразу)
            id для сущности будет гарантированно назначен после завершения транзакции(может и сразу)
            может кинуть PersistentObjectException, значит объект не считается новым,
                например если задан у сущности id

        merge()
            меняет состояние объекта из transient\detached в persistent
            для transient как persist()
            для detached выполнит загрузки из бд, обновление в контексте, и обновит в бд
                по завершении тразакции или сессии

        remove()
            удаление сущности из контекста и базы, из persistent в transient
            сущность должна быть persistent, иначе будет IllegalArgumentException

        refresh()
            обновление сущности в контексте, есл она была изменена в другой сессии
                после выгрузки из базы в контекст

        detach()
            отключает объект от контекста, не удаляет из базы. из persistent в detached

        createQuery()
            создание запроса через jpql
            query бывает typed(приоритет использования)
            jpql работает с агрегациями
            jpql запросы очень мощный инструмент
                прямо в запросе jpql можно сделать агрегацию в java объект из
                полей сущности и вернуть его в качестве ответа

        uptach()
            сущность из detached в persistent

        lock()
            блокировка, писсимистичная, есть еще version(оптимистичная)

проблема n+1

первое решение
EntityGraph
    позволяет указать для родительского запроса какие поля дочерней сущности
        загружать с ней в одном запросе
    перебивает lazy
    задается с помощью аннотаций @NamedEntityGraph над сущностью
    может быть применен к query с помощью метода setHint
    можно удачно сочетать с spring data

@NamedEntityGraph
    (name = "class_name_load_entity_graph")
        имя потом используется в формирование
            query.setHint(java.persistence.fetchgraph, entityGraph);
    (attributeNodes = {@NamedAttributeNode("class_field_name")
        указывается название поля дочерней сущноси которое должно быть выгружено
            в 1 запросе с родительской сущностью

второе решение
join fetch
    позовляет в jpql запросе получить дочерний объект в 1 запросе с родительским

третье решение
@Fetch
    (FetchMode.SUBSELECT)
        указывает что нужно отдельно подгрузить список дочерных сущностей из бд
            в 1 запросе и потом загрузить список родительских объектов в 1 запросе,
                после чего смержить его с родительским списком
    вешается над полем родительского класса
    аннотация hibernate

четвертое решение
@BatchSize
    (size = n)
        n - кол-во родительской пачки
        указывает фреймворку что на каждый n родительский записей нужно делать
            запрос за связями пачкой
    работает только для fetch режима по умочанию (@Fetch(FetchMode.SELECT))
    аннотация Hibernate

Criteria API
    позволяет строить с помощью api java jpql запросы

@NamedQuery
    нужна инфа об этом

Тестирование orm jpa

@DataJpaTest
    используется для поднятия контекста отвественного за persistence layer
    настраевает testEntityManager(можно внедрять и использовать)
    в начале теста открывает и после теста откатывает транзакцию

@EntityScan
    позволяет просканировать пакет сущностей что бы их прочитал контекст

можно мокать entitymanager, entitytransaction, query


