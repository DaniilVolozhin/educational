web
    куча протоколов
    куча стандартов
    куча rfc

http
	строится на системе запрос-ответ
	http методы, глагол что мы хотим сделать:
    	GET
    	    получение страниц
    	    получение entity
    	POST
    	    отправка данных формы
    	    создание entity
    	    не идемпотентный
    	PUT
    	    изменение entity
    	    перезаписывает сущность целеком
    	PATCH
    	    изменение entity
    	    изменяет агетивно
    	DELETE
    	    удаление
    	HEAD
    	    возвращает только хедеры
		OPTIONS
		    какие запросы доступны по адресу
		TRACE
		    отключен из безопасности
    http-code
        1xx
            информационные, используют браузер-сервер
        2xx
            все ок
        3хх
            редирект
            важны коды для ceo оптимизации
        4хх
            ошибка, клиент виноват
        5хх
            ошибка, сервер виноват

web-сокет
    на самом деле тоже текстовый протокол
	строится на системе запрос-ответ

идемпотентность
	сколько бы раз не применили операцию, результат один и тот же как
	    если бы применили 1 раз
	относительно первой операции и следующих, получение сущности выполняет на сервере одни
	    и те же операции метод, а сохранения меняет состояние сервера


Spring MVC:
    основан на model-view-controller архитектуре
    базируется на dispatcher servlet/front controller паттерне
    не зависит от технологии view, она настраевается гибко
    spring-boot-starter-web или spring mvc
    без спринг бут @EnableWebMvc
    одна точка запуска приложения, внутри себя запускает веб сервер(tomcat),
        но jar получаются довольно большими

MVC
	model
	    динамические данные приложения
	view
	    представление информации
	controller
	    канал для общения

WebApplicationContext
	расширение ApplicationContext с возможностями для web приложений
	его наследники это XmlWebApplCont, AnnotConfWebApplCont, GroovyWebApplCont,
	    XmlPortletApplCont
	добавляет 3 скоупа бинов
	    request
	    session
	    global session
	        используется для портлетов

Servlet
	интерфейс который связывает сервер приложения и spring mvc
	controller


@EnableWebMvc
	включает конфигурацию spring mvc
	не нужна со spring boot
	добавляет в приложение embedded server container

@ServletComponentScan
	ищет классы помеченные @WebServlet @WebFilter @WebListener

@WebServlet
	помечаются классы сервлетов
	можно создать сервлет и через @Bean

@WebFilter
	помечаются классы фильтров
	можно создать фильтр и через @Bean

@WebListener
	помечаются классы листенеров
	можно создать листенер и через @Bean

WebMvcConfugurerAdapter
	дополнительный класс для конфигурации mvc приложения

EmbeddedServletContainerCustomizer
	для настройки embedded server container

Controller
    предоставляет доступ к логике приложения
    могут обрабатывать исключения из бизнес слоя
    получают ввод пользователя, и выбирают модель view для предоставления данных

@RestController
	работает как @Controller и к каждому методу @ResponseBody
	ставить на класс
	возвращает данные в формате(json, xml, text...) указанном для метода или контроллера
	не выбирает view, не возвращает model
	обычно используется для сингл пейдж или микросервисов

@ResponseBody
	обрабатывает ответ из java и отдает клиенту в указанном формате для клиента

@RequestMapping
	("/url")
	    позволяет указать url путь для класса или метода
	(method = RequestMethod.*)
	    указывается тип операции, применим к методам
	(value = {"/url1", "url2"})
	    можно указать несколько маппингов url
	(method = {RequestMethod.Get, RequestMethod.Post})
	    указать несколько операций
	    по умолчанию для всех операций
	ставиться на класс или метод(url_class + url_method)

@GetMapping, @PostMapping, @PutMapping, @PatchMapping, @DeleteMapping
	аннотации работают как @RequestMapping, но уже с заданным method запроса
	со Spring 4.3

@PathVariable
	(value = "path_param_name") указать название параметра в url
	(required = boolean) является ли обязательным, по умолчани true
	получает данные из пути url /{name_param}
	ставиться на параметры метода

@MatrixVariable
	получить множественные параметры из пути запроса

@RequestParam
	ставиться на параметры метода
	(value = "name_value")
	    указывается ключ, для которого будет получено значение
	    получает данные из параметров запроса после ? или
	        для POST достает их из request body
	(required = boolean)
	    является ли параметр обязательным
	(defaultValue = "value")
	    можно указать значение пол умолчанию если не пришел параметр

POJO
    если параметров запроса очень много, то можно использовать java объект и
        Spring сам сопоставит параметры и названия полей на объект

@RequestBody
	ставиться на параметры метода
	позволяет получить тело запроса в формате json, xml и т.д. в java объект
	    в параметры метода
    спринг бут сам сконфигурирует jackson и сконвертирует в java

@RequestHeader
	позволяет получить header в параметры метода
	ставиться на параметры метода

ResponseEntity
	билдер для настройки ответа

@ExceptionHandler
	(class_name.class)
	ставиться на метод и в параметры можно получить class_name_exception
	перехватывает exception по типу из параметров для всех методов контроллера

@ControllerAdvice
	ставиться на контроллер который занимается обработкой ошибок со всех контроллеров
	перехватывает все exception с контроллеров и обрабатывает их
	класс содержит @ExceptionHandler-ы с методами
