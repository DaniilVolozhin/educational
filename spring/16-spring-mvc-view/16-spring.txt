Класические web приложение:
    html код с данными для каждой страницы генерируется сервером
    css,js(анимация) подключается в файл
    на каждый вызов перезагрузка страницы

AJAX приложение:
    небольшая статическая html
    данные загружаются с сервера отдельно
    внутрь статической html загружаются шаблоны html
    css подлючается к главной html
    js добавляет поведение шаблонам

Феймворки angular/react/vue
    spa(single page application) статическая страница, нет перезагрузки страниц
    минимальная html только что бы подключить js и css
    переход между страниц с помощью js
    html генерируют фремворки

Spring MVC View:
    обычно работает только поверх GET и POST

Front Controller(Dispatcher Servlet)
    в нем зарегистрированны все контроллеры и view
    распределяет какой контроллер и view выбрать
    получает model от контроллра и передает view

Controller
    обрабатывает вызов после получения
    возвращает model и название view

View
    предназначен для отображения модели
    работает через viewResolver
    получает model и возвращает заполненый темплейт view
    можно вернуть String, View, ModelAndView

Model
    абстракция которая содержит данные для возрата клиенту
    можно вернуть ModelAndView, Model, Map, void


Spring Mvc работает с :
    jsp(с ограничениями и плясками), thymeleaf, groovy markup templates,
        freemarker, velocity(old)

Работает через @Controller
	из методов возвращается "название_формы_ответа"
	параметры метода принимается Model(маппа с обектами для заполнения формы клиенту)

thymeleaf:
    html валидна для даже без java приложения
    позволяет заполнять данные внутри html из model java
        с помощью spring spell
    не создает проблем при одновременной разработке java и веб
    spring-boot-starter-thymeleaf подключается в спринг бут
	во view можно передать объектами(и вложенные) и вызывать их методы spring spell
	можно во вью работать с бинами, но лучше в model
	в resources должна быть папка /templates которая содержит в себе html
		в /static и /public картинки и css

xmlns:th="http://www.thymeleaf.org">
	для подключения в html файл

th:*=""
	используется в тегах для получения значений из Model
	в "" пишется spel
	теги * (просто дублировать тег который в html):
	object в параметры "${название_объекта_в_моделе) задает для вложенных тегов доступ
		к полям объекта кратко *{поле_объекта} вместе ${название_объекта.поле_объекта}
	text
		используется для вывода данных через spel
		вместе с object позволяет получить *{поле_объекта} кратко
	href
		позволяет корректирвовать url для страницы во время работы приложения
			то есть задать параметры запроса ? "@{/url(key=${value}, key2...)}"
			рестовый подход "@{/delete/__${id}__}"
	th:action
		для action формы
	th:value
		значение input
	th:each
		foreach
	th:if
		блок создается если условие истино
    @beanName
        позволяет получить бин и работать с ним через spring spell

Локализация:
    определять пользовательскую локаль
        LocaleResolver
    менять пользовательскую локаль
        LocaleChangeInterceptor
    отображать локализованный текст\сообщения на странице
        MassageSource


th:text=""
	"#{key_in_prop}" или "#{key_in_prop('Params')}"(key=Hello, {0})
	можно так же через th:utext

LocaleResolver
	создается как бин что бы определить какая локаль у пользователя
		AcceptHeaderLocaleResol ver (на основании заголовка "Accept-Language")
		CookieLocaleResolver (текущая локаль сохраняется в cookie)
		SessionLocaleResolver (текущая локаль сохраняется в сессии)
	Spring Boot сконфигурирует сам

LocaleChangeInterceptor
    работает через ?lang=
	позволяет пользователю менять локаль через переходы по ссылкам:
	нужно добавляться в конфигурацию сервлета что бы заработало
	Spring Boot сконфигурирует сам



Test spring mvc view:
@WebMvcTest
	(Name_class_controller.class)
	    поднимает контекст только для указанного класса
	@Authowired MockMvc и далее работа с @MockBean и тд

MockMvc
    класс для тестирования запросов контроллера
    можно тестировать view, возвращаемое значение, коды, метод и прочее
    можно делать интеграционные тест с вызовом апи контроллера
    mvc.perform().andExpect() и тд




Современные Spring Mvc приложения:
где требуется scope session:
	создается jsessionId, который передается клиенту, хранится как map
		jsession хранится на уровне веб сервера, spring поддерживает реализацию
		по умолчанию удаляется через 30 минут после последнего обращения
	испльзуется для настроек пользователя, security, формы, cross-page

session scope
	для работы нужен прокси, конфигурируется через @Scope
	в параметры методов работающих с session scope можно получить HttpSession
