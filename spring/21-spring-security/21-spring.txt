Какие задачи безопасности возникают в enterprise приложении:
    проверить что пользователь тот за кого себя выдает
        (секрет, пароль, ключь, смс, криптография)
    пользователю предоставляется доступ только к тому функционалу, к которому он
        имеет доступ

Какие мехнизмы нужны для решения задач:
    подтверждение подлинности пользователя
    предоставления/запрещения доступа пользователя
    хранения прав доступа
    проверка прав доступа

Spring Security:
    содержит реализацию механизмов для решения задач безопасности
    в web работает через servlet filter, фильтры объединены в цепочки
    цели:
        аутентификация
            проверка что пользователь тот за кого себя выдает(кто ты?)
        авторизация
            предоставление прав доступа к объекту(что ты можешь?)
            подтверждение прав, разрешение
            все что не разрешено то запрещено
    spring security содержит реализации для механизмов безопасности
        подтверждение подлинности
        предоставление/запрещение доступа
        храненить права доступа
        проверка права доступа
    механизмы аутентификации в spring security
    	http basic
    	    в заголовках передаются данные в открытом виде
    	http digest
    	    в заголовках передаются данные в открытом виде
    	http x.509
    	    используется ssl соединение для аутентифицирования
    	form-based
    	    форма для аутентификации
    	openId
    	    задача по аутентификации отдается внешнему ресурсу
    	LDAP
            active directory
    	jdbc
    	    хранить данные о пользователе и и правах
    	in memory
    	    хранить данные о пользователе и и правах
        своя реализация
    механизмы авторизации осуществляются по
        url
        методам сервисов
        объектам
    не является
        firewall, не защитить от ddos
        антивирусом
        не спасает от sql injection
        не спасает от xss и т.д.
	    не шифрует и не обфусцирует поток

Основные компоненты:
    spring-security-core
        содержит основные астракции
    spring-security-web
        содержит доп класс для работы в web окружении(servlets)
    spring-security-config
        для описания конфигурации spring-security с помощью spring security xml
    spring-security-web и config минимальный набор
    spring-security-acl
        содержит астракции acl(авторизация)
        авторизация по бизнес объектам
    spring-security-ldap
        ldap
    spring-security-openid
        интеграция по протоколу oauth 2.0 + openid connect
    spring-security-test
        классы для unit тестирования

SecurityContext
    хранит данные о аутентификации и авторизации
    интерфейс
	хранилище для Authentication
	можно установить authentication
	можно прочитать authentication
	текущий объект получается из SecurityContextHolder
	отражает текущий контекст безопасности
	является контейнером для объекта типа authentication

SecurityContextHolder
    позволяет получить Context(SecurityContext) корректный для текущего запроса
        например может получаться по текущей сессии
	можно настроить мод, формат в котором он будет работать
		MODE_THREADLOCAL
		    SecurityContextHolder доступен только для одного локального треда
		    в рамках 1 потока, а в реальности 1 запроса, будет жить security context,
		        для каждого нового потока придется заполнять security context заново
		MODE_INHERITABLETHEADLOCAL
		    из потоков строиться дерево и только по этому дереву есть доступ
		        к SecurityContextHolder
		MODE_GLOBAL
		    SecurityContextHolder доступен во всем приложении
    можно получить данные о текущем аутентифицирванном пользователе
    можно очистить конекст

Authentication
    данные о текущем пользователе
    это интерфейс
	хранит данные о аутентификации и авторизации и текущем пользователе:
        Authorities
            список зарегистрированных прав, запрещений или разрешений
            это права которые зарегистрированы
            GrantedAuthority
                список текущих запрещений или разрешений
        Credentials
            подтверждает аутентичность пользователя
            объект для подтверждения что пользователь тот за кого себя выдает
            секрет которым пользователь подтверждает что это он
            в терминах логин-пароль это пароль
            пароль в открытом виде не хранить, необходимо шифровать
        Details
            общая информация о пользователе(не связанная с security) но которую
                полезно иметь
        Principal
            идентификатор пользователя
            отражает учетную запись пользователя
            в терминах логин-пароль это логин
            важно что бы корректо работал equals и hashCode

UserDetails
	содержит данные пользователя из хранилища приложения, и его состояние
	authorities, username, password, accountNonExpired(истек ли срок действия),
	accountNonLocked(заблокирован ли),
	credentialsNonExpired(протух ли пароль),
	enabled(включен ли)
	isAccountNonExpired
        проверяет осталось ли время действия у учетной записи
        если срок жизни истек, то учетная запись перестает работать
        признак заполняется при аутентификации
    isAccountNonLocked
        блокировка пользователя, пользователя не удаляют, но войти он больше не может
        признак заполняется при аутентификации
    isCredentialsNonExpired
        проверяет осталось ли время жизни у пароля
        признак заполняется при аутентификации
    isEnabled
        пользователь с системе есть, но войти еще не может
        признак заполняется при аутентификации


UserDetailsService
    реализует загрузку пользовательских данных из хранилища
	необходимо явно создать как бин, и возвращать выбранную реализацию
	есть реализации для хранения:
	    в базе
	    in memory
	    кастомная реализация


Как происходит работа:
    приходит запрос
    spring web
    spring security
        пытается аутентифицироваться
        BasicAuthenticationFilter
            далает вызов AuthenticationManager для осуществения аутентификации
            если аутентификации прошла успешно то сохраняет заполненный объект
                Authentication в SecurityContextHolder
        AuthenticationManager
            интерфейс
            выполняет аутенификацию
            создается authentication с логином и паролем из request
                authenticated = false
            делает вызов ProviderManager
        ProviderManager
            вызывает конкретную реализацию авторизацию AuthenticationProvider
        AuthenticationProvider
            выполняет аутентификацию
            зализает в UserDetails
            проверят что пароли совпадают
            в случае успеха делает нового Authentication заполненого данными
                с authenticated = true
        UserDetailsService
            по principal получает UserDetails
            UserDetails
                содержит User

Шифрование пароля:
    PasswordEncoder
        класс для кодирования пароля
        создается как бин
        для повышения безопасности:
            к функциям хеширования(md5) небходимо добавлять соль(salt) к каждому паролю,
                соль хранится в базе вместе с паролем, для каждого пароля своя
        есть много реализаций
        нет функции декодировки
        encode
            кодирует пароль
        matches
            функция сопоставления закодированного пароля в базе с закодированным паролем для
                проверки

AccessDecisionManager
    интерфейс
    принимает решение о доступе к запрашиваемому объекту по атрибутам
    часть авторизации

AbstractSecurityInterceptor
	отвечает за авторизацию

SecurityInterceptors
    FilterSecurityInterceptor
        управляет доступом на уровне url
        использует цепочку http фильтров для правления доступом

    MethodSecurityInterceptor
        управляет доступом на уровне методов класса
        использует spring aop

spring security и web:
    spring security работает до web
    работает через servlet filter

@EnableWebSecurity
    ставится на конфигурационном классе
	включает создание и конфигурацию бинов
	нужно включать в спринг бут

WebSecurityConfigurerAdapter
    используется для конфигурации через java класс
    в классе наследнике пишутся настройки для filter chain, в который передает запрос
        delegatingFilerProxy
	настраевает цепочку фильтров
	порядок фильтров в цепочке можно сконфигурировать(очень осторожно)
	configure(WebSecurity) какие пути мы игнорируем для security
	configure(HttpSecurity) настраевает фильтры для security

DelegatingFilterProxy
    интегрирует spring security в последовательлность обработки http запроса
	единственная задача передать вызов в цепочки фильтров spring security
	передает вызов в FilterChainProxy, которые отвечает за цепочку фильтров security

Фильтры spring security реализует конкретные аспекты безопасности:
    служебные
    аутентификация
    авторизация
    обработка ошибок

Цепочка фильтры в Spring Security по порядку вызова:
    цепочка фильтров в случае java-based конфигурации создается не явно

    ChannelProcessingFilter
        управляет каналом передачи запроса. Если хочется только https, то не https
            не даст обработать, развернет или редирект или что то еще

    ConcurrentSessionFilter
        работа с сессиями пользователя с разных клиентов

    SecurityContextPersistenceFilter
        создает и инициирует контекст безопасности

    Фильтр(ы) аутетификации
        первичная аутентификация

    RememberMeAuthenticationFilter
        вторичная аутентификация

    AnonymousAuthenticationFilter
        вторичная аутентификация

    ExceptionTranslationFilter
        обработка данных с предыдущих шагов, принятие решения переходить ли к авторизации

    FilterSecurityInterceptor
        авторизация



